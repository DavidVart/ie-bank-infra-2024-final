name: ie-bank-infra

on:
  workflow_dispatch:
  push:
      paths-ignore:
        - 'scripts/**'
  pull_request:
    branches: [ "main" ]

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-A-DEV
  RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-A-UAT
  RESOURCE_GROUP_PROD: BCSAI2024-DEVOPS-STUDENTS-A-PROD
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: devopps-team

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Bicep linter
        run: az bicep build --file ./main.bicep

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'

    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step to create the ACR if it doesn’t exist
      - name: Create Azure Container Registry
        run: |
          az acr create --resource-group ${{ env.RESOURCE_GROUP_DEV }} \
                        --name devoppsacr \
                        --sku Standard \
                        --admin-enabled true

      # Step to retrieve ACR credentials
      - name: Get ACR credentials
        id: acr_credentials
        run: |
          echo "::set-output name=login_server::$(az acr show --name devoppsacr --query "loginServer" -o tsv)"
          echo "::set-output name=username::$(az acr credential show --name devoppsacr --query "username" -o tsv)"
          echo "::set-output name=password::$(az acr credential show --name devoppsacr --query "passwords[0].value" -o tsv)"
        
      # Run ARM template deployment with parameters
      - name: deploy
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./main.bicep
          parameters: ./parameters/dev.parameters.json
          parametersOverride: |
            environmentType='nonprod'
            appServiceAPIEnvVarDBPASS='${{ secrets.DBPASS }}'
            appServiceAPIDBHostDBUSER='${{ secrets.DBUSER }}'
            appServiceAPIEnvVarDBHOST='${{ vars.DBHOST }}'
            appServiceAPIEnvVarDBNAME='${{ vars.DBNAME }}'
            appServiceAPIEnvVarENV='${{ vars.ENV }}'
            appServiceAPIDBHostFLASK_APP='${{ vars.FLASK_APP }}'
            appServiceAPIDBHostFLASK_DEBUG='${{ vars.FLASK_DEBUG }}'
            containerRegistryLoginServer='${{ steps.acr_credentials.outputs.login_server }}'
            containerRegistryUsername='${{ steps.acr_credentials.outputs.username }}'
            containerRegistryPassword='${{ steps.acr_credentials.outputs.password }}'
            frontendRepositoryUrl='${{vars.FRONTEND_REPO_URL}}

          deploymentName: ${{ env.USER_ALIAS }}-dev

  deploy-uat:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    environment:
      name: 'UAT'

    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step to create the ACR if it doesn’t exist
      - name: Create Azure Container Registry
        run: |
          az acr create --resource-group ${{ env.RESOURCE_GROUP_UAT }} \
                        --name devoppsacr \
                        --sku Standard \
                        --admin-enabled true

      # Step to retrieve ACR credentials
      - name: Get ACR credentials
        id: acr_credentials
        run: |
          echo "::set-output name=login_server::$(az acr show --name devoppsacr --query "loginServer" -o tsv)"
          echo "::set-output name=username::$(az acr credential show --name devoppsacr --query "username" -o tsv)"
          echo "::set-output name=password::$(az acr credential show --name devoppsacr --query "passwords[0].value" -o tsv)"

      # Run ARM template deployment with parameters
      - name: deploy
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./main.bicep
          parameters: ./parameters/uat.parameters.json
          parametersOverride: |
            environmentType='nonprod'
            appServiceAPIEnvVarDBPASS='${{ secrets.DBPASS }}'
            appServiceAPIDBHostDBUSER='${{ secrets.DBUSER }}'
            appServiceAPIEnvVarDBHOST='${{ vars.DBHOST }}'
            appServiceAPIEnvVarDBNAME='${{ vars.DBNAME }}'
            appServiceAPIEnvVarENV='${{ vars.ENV }}'
            appServiceAPIDBHostFLASK_APP='${{ vars.FLASK_APP }}'
            appServiceAPIDBHostFLASK_DEBUG='${{ vars.FLASK_DEBUG }}'
            containerRegistryLoginServer='${{ steps.acr_credentials.outputs.login_server }}'
            containerRegistryUsername='${{ steps.acr_credentials.outputs.username }}'
            containerRegistryPassword='${{ steps.acr_credentials.outputs.password }}'
          deploymentName: ${{ env.USER_ALIAS }}-uat
